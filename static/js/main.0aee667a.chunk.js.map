{"version":3,"sources":["model/chess/PlayerSideColour.ts","ui/Layout.tsx","model/seedwork/ValueObject.ts","model/chess/Piece.ts","model/chess/Castling.ts","model/chess/ChessGameEngineError.ts","model/chess/chessboard/Rank.ts","model/chess/chessboard/File.ts","model/chess/chessboard/Coordinates.ts","model/chess/Move.ts","model/chess/rules/pieces/PieceTraversal.ts","model/chess/chessboard/CoordinatesCalculator.ts","model/chess/rules/pieces/PawnRules.ts","model/chess/rules/pieces/BishopRules.ts","model/chess/rules/pieces/RookRules.ts","model/chess/rules/pieces/QueenRules.ts","model/chess/GameStatus.ts","model/chess/rules/pieces/KingRules.ts","model/chess/rules/pieces/KnightRules.ts","model/chess/chessboard/Chessboard.ts","model/chess/FenSetup.ts","model/chess/rules/ChessRules.ts","model/chess/UndoRequest.ts","model/chess/players/HumanPlayer.ts","model/chess/Game.ts","model/chess/GameState.ts","model/chess/GameStateSetup.ts","ui/chess/Square.tsx","ui/chess/ChessboardPresenter.tsx","ui/chess/UndoMoveButton.tsx","infrastructure/stockfish/StockfishPlayer.ts","ui/chess/PromotionPiecePicker.tsx","ui/chess/GameStatePresenter.tsx","ui/chess/GameCreator.tsx","ui/App.tsx","infrastructure/serviceWorker.ts","index.tsx"],"names":["PlayerSideColour","ChessNav","useState","navbarToggled","setNavbarToggled","Navbar","color","dark","expand","Container","NavbarBrand","href","NavbarToggler","onClick","className","Collapse","isOpen","navbar","Nav","NavItem","NavLink","target","Layout","props","id","children","ValueObject","other","Object","keys","this","key","Piece","pieceAlgebraicNotation","algebraicNotation","unicodeSymbol","toUpperCase","white","black","getUnicodeSymbol","WhitePawn","WhiteRook","WhiteKnight","WhiteBishop","WhiteQueen","WhiteKing","BlackPawn","BlackRook","BlackKnight","BlackBishop","BlackQueen","BlackKing","Castling","ChessGameEngineError","Error","ranks","isRank","potentialRank","map","r","toString","includes","files","isFile","potentialFile","f","Coordinates","file","rank","algebraicCoordinatesString","parseInt","Move","from","to","promoteTo","result","isDiagonal","isHorizontalOrVertical","fileIteratorCount","fileDirection","rankIteratorCount","rankDirection","fileDelta","rankDelta","fileIndex","indexOf","rankIndex","fieldCoordinates","push","Math","sign","abs","uciString","fromAlgebraicNotation","substring","length","PieceTraversal","move","board","allowCaptureOnFinalSquare","traversalStepsLimit","Number","POSITIVE_INFINITY","isTraversable","traversalStepsExceeded","hasNoUncapturablePiecesOnPath","getTraversalCoordinatesBetweenFromTo","traversalCoordinate","isPieceOnTraversalRoute","isPieceOnSquare","isFinalSquare","isCaptureValid","getPiece","squareCoordinates","destination","referentialEquals","CoordinatesCalculator","element","canAdd","toAlgebraicNotationString","addFile","addRank","canAddFile","canAddRank","add","delta","Array","PawnRules","gameState","doesMoveForward","hasValidPromotionOnlyIfLandingOnEndRow","landsOnSquareWithEmptyOrOppositePiece","isValidForwardMove","isValidAttackingMove","isValidEnPassantMove","piece","moveRankDelta","tryAdd","hasPromotion","leftAttackFileDelta","rightAttackFileDelta","isCaseValid","potentialAttackCoordinates","getAttackingCoordinates","pieceOnAttackCoordinates","targetFieldHasOppositeColorPiece","leftEnPassantCoordinates","rightEnPassantCoordinates","enPassant","traversalCoordinatesLimit","canTraverse","targetPiece","BishopRules","RookRules","QueenRules","isMoveValid","GameStatus","CastlingService","castling","whiteKingside","fromUciString","whiteQueenside","blackKingside","blackQueenside","kingCoordinates","castlingRookCoordinates","kingMoveToCastling","toUciString","KingRules","_kingCastlingRules","KingCastlingRules","isValidCastling","movesByMoreThanOneField","_chessRules","ChessRules","castlings","isPieceBetweenKingAndRook","kingMovesThroughAttackedField","kingToRookFileDelta","getCastlingKingCoordinates","getCoordinatesBetweenKingAndRook","coordinates","isSquareAttacked","getCastlingColor","KnightRules","getPossibleLandingCoordinates","some","plc","landsOnEmptyOrOppositeColor","knightDirections","knightPiece","toFieldPiece","Chessboard","_internalState","fill","allCoordinates","position","internalRow","rankToRow","internalColumn","fileToColumn","emptyPieceCounter","writeDownAndResetEmptyPieceCounterIfIsNot0","current","withPiece","clone","JSON","parse","stringify","fen","fenPiecePart","split","i","asNumber","isNaN","charCodeAt","getAllCoordinates","FenSetup","ongoingGameStatuses","ongoing","ongoingWhiteKingInCheck","ongoingBlackKingInCheck","gameStateHistory","currentGameState","isCheckmate","currentColor","checkmateBlackWon","checkmateWhiteWon","isStalemate","drawStalemate","isDraw50MoveRule","draw50MoveRule","isDrawThreefoldRepetition","drawThreefoldRepetition","isKingInCheck","checkIfKingSafe","pieceRules","getPieceRules","isKingInCheckAfterMove","targetCoordinates","attackedByColor","attackingPieceMove","potentialPromotion","attackingPieceMoveWithPromotion","hasAnyMove","canMoveAnyPiece","halfMoveClock","fenToCount","reduce","acc","gs","set","toFen","get","Map","values","findPieceCoordinates","oppositeColor","afterMoveGameState","withBoard","withMove","UndoRequest","HumanPlayer","_resolveGetMovePromise","Promise","resolve","Game","initialPosition","playerWhite","playerBlack","ruleEngine","_gameStateHistory","_moveProcessedSubscribers","startGame","getCurrentState","getGameStatus","observerCallback","requestPlayerMove","player","getMove","then","value","currentPiece","afterMoveState","afterMove","getCurrentPlayer","makeMoveIfValidWithoutNotifyMoveProcessed","notifyMoveProcessed","forEach","s","getCurrentStatus","undoFullMove","makeMoveIfValid","awaitUndoRequestedAfterGameFinished","movesToGoBack","slice","undoFullMoveWithoutNotifyMoveProcessed","GameState","_fen","_board","boardAfterMove","getBoardAfterMove","nextColor","getColorAfterMove","castlingsAvailable","getCastlings","enPassantAvailable","getEnPassantStateAfterMove","getHalfMoveClockAfterMove","fullMoveNumber","getFullMoveNumberAfterMove","fromParts","isCastling","castlingMoves","castlingToMoves","castlingMove","pawnCapturedOnEnPassantRank","isRookMoving","getCastlingRookCoordinates","isKingInValidCastlingPosition","isRookInValidCastlingPosition","rookPosition","isKingMoving","isPawn","getEnPassantSquare","fromFen","castlingsString","c","enPassantString","currentColorString","sort","join","GameStateSetup","defaultInitial","empty","Square","isSelected","isLegalPieceMove","handleSquareSelected","classes","getCalculatedClasses","data-testid","ChessboardPresenter","chessboard","reverseBoard","selectedSquareCoordinates","pieceLegalMoveCoordinates","ranksPresentation","reverse","Row","Col","lpc","UndoMoveButton","currentPlayer","players","currentStatus","gameHasEnded","anyPlayerIsHuman","p","currentPlayerIsHuman","isUndoValid","Button","find","requestUndo","disabled","StockfishPlayer","depth","_depth","_stockfishWorker","Worker","process","a","postMessage","onmessage","ev","message","data","UciProtocolInterpreter","hasFoundBestMove","getMoveFromMessage","playerColor","exec","promoteToOutput","promoteToPiece","promoteToOutputWithProperCasing","fromFile","fromRank","toFile","toRank","test","PromotionPiecePicker","pickedPieceCallback","allowedPromotionPieceWhiteVariants","ButtonGroup","whitePromotionPiece","properColorPromotionPiece","promotionPieceWhiteVariant","getPieceProperColor","outline","HandleSquareSelectedHelper","savedSquareCoordinates","isSquareEmpty","currentPlayerColor","square","useHandlePlayerSquareSelection","setSavedSquareCoordinates","pickPromotionCallback","setPickPromotionCallback","isNonHumanPlayer","isEmptyFirstSelection","isNonOwnPieceFirstSelection","previouslySelectedPiece","isMoveToPromotion","promotionMoveFrom","promotionMoveTo","pickedPiece","makeMove","GameStatePresenter","game","setCurrentStatus","setCurrentGameState","setCurrentPlayer","useEffect","subscribeMoveProcessed","reverseBoardInitial","isBoardReversed","setIsBoardReversed","title","surrogatePromoteTo","getPieceLegalMoveCoordinates","NewGameForm","setChessGame","stockfish","name","create","availablePlayers","initialValues","selectedPlayerWhite","selectedPlayerBlack","playerWhiteAnalysisDepth","playerBlackAnalysisDepth","onSubmit","playerWhiteInstance","ap","playerBlackInstance","playerWhiteName","playerBlackName","handleChange","handleSubmit","Form","Alert","FormGroup","Label","for","Input","type","onChange","defaultValue","GameCreator","chessGame","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0aee667a.chunk.js","sourcesContent":["enum PlayerSideColour {\n  white = \"white\",\n  black = \"black\"\n}\n\nexport default PlayerSideColour;\n","import React, { useState } from \"react\";\nimport {\n  Collapse,\n  Container,\n  Nav,\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport \"./Layout.css\";\n\nconst ChessNav: () => JSX.Element = () => {\n  const [navbarToggled, setNavbarToggled] = useState(false);\n\n  return (\n    <Navbar color=\"dark\" dark expand=\"xs\">\n      <Container>\n        <NavbarBrand href=\".\" color=\"dark\">\n          tychess\n        </NavbarBrand>\n        <NavbarToggler\n          onClick={() => setNavbarToggled(!navbarToggled)}\n          className=\"mr-2\"\n        />\n        <Collapse isOpen={navbarToggled} navbar>\n          <Nav navbar>\n            <NavItem>\n              <NavLink\n                href=\"https://github.com/tpamula/tychess\"\n                target=\"_blank\"\n              >\n                source code\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Container>\n    </Navbar>\n  );\n};\n\nconst Layout: React.FC = props => (\n  <div id=\"main-wrapper\">\n    <ChessNav />\n    <Container>{props.children}</Container>\n  </div>\n);\n\nexport default Layout;\n","export default abstract class ValueObject<T> {\n  /**\n   * Performs a shallow referential equality operation.\n   * @param other\n   */\n  referentialEquals(other: T | null): boolean {\n    if (other === null) return false;\n\n    for (let key of Object.keys(this)) {\n      if ((this as any)[key] !== (other as any)[key]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import PlayerSideColour from \"./PlayerSideColour\";\nimport ValueObject from \"../seedwork/ValueObject\";\n\nexport type pieceAlgebraicNotation =\n  | \"P\"\n  | \"R\"\n  | \"N\"\n  | \"B\"\n  | \"Q\"\n  | \"K\"\n  | \"p\"\n  | \"r\"\n  | \"n\"\n  | \"b\"\n  | \"q\"\n  | \"k\";\n\nexport default class Piece extends ValueObject<Piece> {\n  static BlackBishop = new Piece(\"b\");\n  static BlackKing = new Piece(\"k\");\n  static BlackKnight = new Piece(\"n\");\n  static BlackPawn = new Piece(\"p\");\n  static BlackQueen = new Piece(\"q\");\n  static BlackRook = new Piece(\"r\");\n  static WhiteBishop = new Piece(\"B\");\n  static WhiteKing = new Piece(\"K\");\n  static WhiteKnight = new Piece(\"N\");\n  static WhitePawn = new Piece(\"P\");\n  static WhiteQueen = new Piece(\"Q\");\n  static WhiteRook = new Piece(\"R\");\n  readonly algebraicNotation: pieceAlgebraicNotation;\n  readonly color: PlayerSideColour;\n  readonly unicodeSymbol: string;\n\n  private constructor(pieceAlgebraicNotation: pieceAlgebraicNotation) {\n    super();\n\n    this.algebraicNotation = pieceAlgebraicNotation;\n    this.color =\n      pieceAlgebraicNotation.toUpperCase() === pieceAlgebraicNotation\n        ? PlayerSideColour.white\n        : PlayerSideColour.black;\n\n    this.unicodeSymbol = this.getUnicodeSymbol(pieceAlgebraicNotation);\n  }\n\n  static fromAlgebraicNotation(\n    pieceAlgebraicNotation: pieceAlgebraicNotation\n  ): Piece {\n    switch (pieceAlgebraicNotation) {\n      case \"P\":\n        return Piece.WhitePawn;\n      case \"R\":\n        return Piece.WhiteRook;\n      case \"N\":\n        return Piece.WhiteKnight;\n      case \"B\":\n        return Piece.WhiteBishop;\n      case \"Q\":\n        return Piece.WhiteQueen;\n      case \"K\":\n        return Piece.WhiteKing;\n      case \"p\":\n        return Piece.BlackPawn;\n      case \"r\":\n        return Piece.BlackRook;\n      case \"n\":\n        return Piece.BlackKnight;\n      case \"b\":\n        return Piece.BlackBishop;\n      case \"q\":\n        return Piece.BlackQueen;\n      case \"k\":\n        return Piece.BlackKing;\n    }\n  }\n\n  private getUnicodeSymbol(\n    pieceAlgebraicNotation: pieceAlgebraicNotation\n  ): string {\n    switch (pieceAlgebraicNotation) {\n      case \"P\":\n        return \"♙\";\n      case \"R\":\n        return \"♖\";\n      case \"N\":\n        return \"♘\";\n      case \"B\":\n        return \"♗\";\n      case \"Q\":\n        return \"♕\";\n      case \"K\":\n        return \"♔\";\n      case \"p\":\n        return \"♟\";\n      case \"r\":\n        return \"♜\";\n      case \"n\":\n        return \"♞\";\n      case \"b\":\n        return \"♝\";\n      case \"q\":\n        return \"♛\";\n      case \"k\":\n        return \"♚\";\n    }\n  }\n}\n","import Move from \"./Move\";\nimport PlayerSideColour from \"./PlayerSideColour\";\nimport Service from \"../seedwork/Service\";\nimport Piece from \"./Piece\";\nimport ChessGameEngineError from \"./ChessGameEngineError\";\nimport Coordinates from \"./chessboard/Coordinates\";\n\nenum Castling {\n  whiteKingside = \"K\",\n  whiteQueenside = \"Q\",\n  blackKingside = \"k\",\n  blackQueenside = \"q\"\n}\n\nexport default Castling;\n\nexport class CastlingService implements Service {\n  static castlingToMoves(castling: Castling): Move[] {\n    switch (castling) {\n      case Castling.whiteKingside:\n        return [Move.fromUciString(\"e1g1\"), Move.fromUciString(\"h1f1\")];\n      case Castling.whiteQueenside:\n        return [Move.fromUciString(\"e1c1\"), Move.fromUciString(\"a1d1\")];\n      case Castling.blackKingside:\n        return [Move.fromUciString(\"e8g8\"), Move.fromUciString(\"h8f8\")];\n      case Castling.blackQueenside:\n        return [Move.fromUciString(\"e8c8\"), Move.fromUciString(\"a8d8\")];\n    }\n  }\n\n  static getCastlingColor(castling: Castling): PlayerSideColour {\n    switch (castling) {\n      case Castling.whiteKingside:\n      case Castling.whiteQueenside:\n        return PlayerSideColour.white;\n      case Castling.blackKingside:\n      case Castling.blackQueenside:\n        return PlayerSideColour.black;\n      default:\n        throw new ChessGameEngineError(\"Invalid castling.\");\n    }\n  }\n\n  static getCastlingKingCoordinates(castling: Castling): Coordinates {\n    let kingCoordinates: Coordinates;\n\n    switch (castling) {\n      case Castling.whiteKingside:\n      case Castling.whiteQueenside:\n        kingCoordinates = Coordinates.fromAlgebraicNotation(\"e1\");\n        break;\n      case Castling.blackKingside:\n      case Castling.blackQueenside:\n        kingCoordinates = Coordinates.fromAlgebraicNotation(\"e8\");\n        break;\n      default:\n        throw new ChessGameEngineError(\"Invalid castling.\");\n    }\n\n    return kingCoordinates;\n  }\n\n  static getCastlingRookCoordinates(castling: Castling): Coordinates {\n    let castlingRookCoordinates: Coordinates;\n\n    switch (castling) {\n      case Castling.whiteKingside:\n        castlingRookCoordinates = Coordinates.fromAlgebraicNotation(\"h1\");\n        break;\n      case Castling.whiteQueenside:\n        castlingRookCoordinates = Coordinates.fromAlgebraicNotation(\"a1\");\n        break;\n      case Castling.blackKingside:\n        castlingRookCoordinates = Coordinates.fromAlgebraicNotation(\"h8\");\n        break;\n      case Castling.blackQueenside:\n        castlingRookCoordinates = Coordinates.fromAlgebraicNotation(\"a8\");\n        break;\n      default:\n        throw new ChessGameEngineError(\"Invalid castling.\");\n    }\n\n    return castlingRookCoordinates;\n  }\n\n  static isCastling(piece: Piece, move: Move): boolean {\n    let matchingCastling = CastlingService.kingMoveToCastling(move);\n\n    switch (matchingCastling) {\n      case Castling.whiteKingside:\n      case Castling.whiteQueenside:\n        return piece === Piece.WhiteKing;\n      case Castling.blackKingside:\n      case Castling.blackQueenside:\n        return piece === Piece.BlackKing;\n      default:\n        return false;\n    }\n  }\n\n  static kingMoveToCastling(move: Move): Castling | null {\n    switch (move.toUciString()) {\n      case \"e1g1\":\n        return Castling.whiteKingside;\n      case \"e1c1\":\n        return Castling.whiteQueenside;\n      case \"e8g8\":\n        return Castling.blackKingside;\n      case \"e8c8\":\n        return Castling.blackQueenside;\n      default:\n        return null;\n    }\n  }\n}\n","export default class ChessGameEngineError extends Error {}\n","type Rank = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\nexport default Rank;\n\nexport const ranks: Rank[] = [1, 2, 3, 4, 5, 6, 7, 8];\n\nexport const isRank = (\n  potentialRank: string | number | Rank\n): potentialRank is Rank => {\n  return ranks.map(r => r.toString()).includes(potentialRank.toString());\n};\n","type File = \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\";\nexport default File;\n\nexport const files: File[] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n\nexport const isFile = (potentialFile: string | File): potentialFile is File => {\n  return files.map(f => f.toString()).includes(potentialFile);\n};\n","import ValueObject from \"../../seedwork/ValueObject\";\nimport ChessGameEngineError from \"../ChessGameEngineError\";\nimport Rank, { isRank } from \"./Rank\";\nimport File, { isFile } from \"./File\";\n\nexport default class Coordinates extends ValueObject<Coordinates> {\n  readonly file: File;\n  readonly rank: Rank;\n\n  constructor(file: File, rank: Rank) {\n    super();\n\n    this.file = file;\n    this.rank = rank;\n  }\n\n  /**\n   *\n   * @param algebraicCoordinatesString e.g. d2, e4\n   */\n  static fromAlgebraicNotation(\n    algebraicCoordinatesString: string\n  ): Coordinates {\n    const file = algebraicCoordinatesString[0] as File;\n    const rank = parseInt(algebraicCoordinatesString[1], 10) as Rank;\n\n    if (!isFile(file) || !isRank(rank))\n      throw new ChessGameEngineError(\n        `Invalid from file/rank - file: ${file} rank: ${rank}.`\n      );\n\n    return new Coordinates(file, rank);\n  }\n\n  toAlgebraicNotationString(): string {\n    return `${this.file}${this.rank}`;\n  }\n}\n","import ValueObject from \"../seedwork/ValueObject\";\nimport Piece, { pieceAlgebraicNotation } from \"./Piece\";\nimport Coordinates from \"./chessboard/Coordinates\";\nimport { files } from \"./chessboard/File\";\nimport { ranks } from \"./chessboard/Rank\";\n\nexport default class Move extends ValueObject<Move> {\n  constructor(\n    readonly from: Coordinates,\n    readonly to: Coordinates,\n    readonly promoteTo: Piece | null = null\n  ) {\n    super();\n  }\n\n  get fileDelta(): number {\n    return files.indexOf(this.to.file) - files.indexOf(this.from.file);\n  }\n\n  get fileDirection(): direction {\n    return Math.sign(this.fileDelta) as direction;\n  }\n\n  get hasPromotion(): boolean {\n    return this.promoteTo !== null;\n  }\n\n  get isDiagonal(): boolean {\n    return (\n      Math.abs(this.rankDelta) === Math.abs(this.fileDelta) &&\n      this.rankDelta !== 0\n    );\n  }\n\n  get isHorizontalOrVertical(): boolean {\n    return (\n      (this.rankDirection !== 0 && this.fileDirection === 0) ||\n      (this.rankDirection === 0 && this.fileDirection !== 0)\n    );\n  }\n\n  get rankDelta(): number {\n    return this.to.rank - this.from.rank;\n  }\n\n  get rankDirection(): direction {\n    return Math.sign(this.rankDelta) as direction;\n  }\n\n  static fromUciString(uciString: string): Move {\n    const from = Coordinates.fromAlgebraicNotation(uciString.substring(0, 2));\n    const to = Coordinates.fromAlgebraicNotation(uciString.substring(2, 4));\n    const promoteTo =\n      uciString.length === 5\n        ? Piece.fromAlgebraicNotation(uciString[4] as pieceAlgebraicNotation)\n        : null;\n\n    return new Move(from, to, promoteTo);\n  }\n\n  getTraversalCoordinatesBetweenFromTo(): Coordinates[] {\n    const result: Coordinates[] = [];\n    if (!this.isDiagonal && !this.isHorizontalOrVertical) return result;\n\n    for (\n      let fileIteratorCount = this.fileDirection,\n        rankIteratorCount = this.rankDirection;\n      !(\n        fileIteratorCount === this.fileDelta &&\n        rankIteratorCount === this.rankDelta\n      );\n      fileIteratorCount += this.fileDirection,\n        rankIteratorCount += this.rankDirection\n    ) {\n      const fileIndex = files.indexOf(this.from.file) + fileIteratorCount;\n      const rankIndex = ranks.indexOf(this.from.rank) + rankIteratorCount;\n\n      const fieldCoordinates = new Coordinates(\n        files[fileIndex],\n        ranks[rankIndex]\n      );\n\n      result.push(fieldCoordinates);\n    }\n\n    // the previous iteration doesn't handle the \"to\" field itself, so:\n    result.push(this.to);\n\n    return result;\n  }\n\n  isTraversable(): boolean {\n    return this.isDiagonal || this.isHorizontalOrVertical;\n  }\n\n  toUciString(): string {\n    return `${this.from.file}${this.from.rank}${this.to.file}${\n      this.to.rank\n    }${this.promoteTo || \"\"}`;\n  }\n}\n\nexport type direction = -1 | 0 | 1;\n","import Move from \"../../Move\";\nimport Chessboard from \"../../chessboard/Chessboard\";\nimport Coordinates from \"../../chessboard/Coordinates\";\n\nexport default class PieceTraversal {\n  static canTraverse(\n    move: Move,\n    board: Chessboard,\n    allowCaptureOnFinalSquare: boolean,\n    traversalStepsLimit: number = Number.POSITIVE_INFINITY\n  ): boolean {\n    return (\n      move.isTraversable() &&\n      !PieceTraversal.traversalStepsExceeded(move, traversalStepsLimit) &&\n      PieceTraversal.hasNoUncapturablePiecesOnPath(\n        move,\n        board,\n        allowCaptureOnFinalSquare,\n        traversalStepsLimit\n      )\n    );\n  }\n\n  private static hasNoUncapturablePiecesOnPath(\n    move: Move,\n    board: Chessboard,\n    allowCaptureOnFinalSquare: boolean,\n    traversalStepsLimit: number\n  ) {\n    for (let traversalCoordinate of move.getTraversalCoordinatesBetweenFromTo()) {\n      if (traversalStepsLimit-- <= 0) return true;\n\n      const isPieceOnTraversalRoute = board.isPieceOnSquare(\n        traversalCoordinate\n      );\n      if (\n        PieceTraversal.isFinalSquare(traversalCoordinate, move.to) &&\n        (!isPieceOnTraversalRoute ||\n          (allowCaptureOnFinalSquare &&\n            PieceTraversal.isCaptureValid(move, board)))\n      ) {\n        return true;\n      }\n\n      if (isPieceOnTraversalRoute) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private static isCaptureValid(move: Move, board: Chessboard) {\n    const doPiecesHaveDifferentColours =\n      board.getPiece(move.from)!.color !== board.getPiece(move.to)!.color;\n\n    return doPiecesHaveDifferentColours;\n  }\n\n  private static isFinalSquare(\n    squareCoordinates: Coordinates,\n    destination: Coordinates\n  ) {\n    return squareCoordinates.referentialEquals(destination);\n  }\n\n  private static traversalStepsExceeded(\n    move: Move,\n    traversalStepsLimit: number\n  ): boolean {\n    return (\n      Math.abs(move.fileDelta) > traversalStepsLimit ||\n      Math.abs(move.rankDelta) > traversalStepsLimit\n    );\n  }\n}\n","import Coordinates from \"./Coordinates\";\nimport ChessGameEngineError from \"../ChessGameEngineError\";\nimport File, { files } from \"./File\";\nimport Rank, { ranks } from \"./Rank\";\n\nexport default class CoordinatesCalculator {\n  static add(\n    element: Coordinates,\n    fileDelta: number,\n    rankDelta: number\n  ): Coordinates {\n    if (!this.canAdd(element, fileDelta, rankDelta))\n      throw new ChessGameEngineError(\n        `Invalid operation - element: ${element.toAlgebraicNotationString()}, fileDelta: ${fileDelta}, rankDelta: ${rankDelta}.`\n      );\n\n    return new Coordinates(\n      this.addFile(element.file, fileDelta),\n      this.addRank(element.rank, rankDelta)\n    );\n  }\n\n  static canAdd(\n    element: Coordinates,\n    fileDelta: number,\n    rankDelta: number\n  ): boolean {\n    return (\n      CoordinatesCalculator.canAddFile(element.file, fileDelta) &&\n      CoordinatesCalculator.canAddRank(element.rank, rankDelta)\n    );\n  }\n\n  static tryAdd(\n    element: Coordinates,\n    fileDelta: number,\n    rankDelta: number\n  ): Coordinates | null {\n    if (!this.canAdd(element, fileDelta, rankDelta)) return null;\n\n    return this.add(element, fileDelta, rankDelta);\n  }\n\n  private static addFile(file: File, delta: number): File {\n    if (!this.canAddFile(file, delta))\n      throw new ChessGameEngineError(\n        `Invalid operation - file: ${file}, delta: ${delta}.`\n      );\n\n    return files[files.indexOf(file) + delta];\n  }\n\n  private static addRank(rank: Rank, delta: number): Rank {\n    if (!this.canAddRank(rank, delta))\n      throw new ChessGameEngineError(\n        `Invalid operation - rank: ${rank}, delta: ${delta}.`\n      );\n\n    return (rank + delta) as Rank;\n  }\n\n  private static canAddFile(file: File, delta: number): boolean {\n    const fileIndex = files.indexOf(file) + delta;\n\n    return Array.from(files.keys()).includes(fileIndex);\n  }\n\n  private static canAddRank(rank: Rank, delta: number): boolean {\n    return ranks.map(r => r as number).includes((rank as number) + delta);\n  }\n}\n","import Move from \"../../Move\";\nimport GameState from \"../../GameState\";\nimport PlayerSideColour from \"../../PlayerSideColour\";\nimport PieceRules from \"./PieceRules\";\nimport Piece from \"../../Piece\";\nimport PieceTraversal from \"./PieceTraversal\";\nimport ChessGameEngineError from \"../../ChessGameEngineError\";\nimport CoordinatesCalculator from \"../../chessboard/CoordinatesCalculator\";\nimport Coordinates from \"../../chessboard/Coordinates\";\n\nexport default class PawnRules implements PieceRules {\n  isMoveValid(move: Move, gameState: GameState): boolean {\n    return (\n      this.doesMoveForward(move, gameState) &&\n      this.hasValidPromotionOnlyIfLandingOnEndRow(move, gameState) &&\n      this.landsOnSquareWithEmptyOrOppositePiece(move, gameState) &&\n      (this.isValidForwardMove(move, gameState) ||\n        this.isValidAttackingMove(move, gameState) ||\n        this.isValidEnPassantMove(move, gameState))\n    );\n  }\n\n  private doesMoveForward(move: Move, gameState: GameState): boolean {\n    const piece = gameState.board.getPiece(move.from);\n    if (piece === null) throw new ChessGameEngineError(\"Piece is null.\");\n\n    const doesMoveForwards =\n      (piece.color === PlayerSideColour.white && move.rankDelta > 0) ||\n      (piece.color === PlayerSideColour.black && move.rankDelta < 0);\n\n    return doesMoveForwards;\n  }\n\n  private getAttackingCoordinates(\n    from: Coordinates,\n    color: PlayerSideColour,\n    fileDelta: number\n  ): Coordinates | null {\n    const moveRankDelta = color === PlayerSideColour.white ? 1 : -1;\n    return CoordinatesCalculator.tryAdd(from, fileDelta, moveRankDelta);\n  }\n\n  private hasValidPromotionOnlyIfLandingOnEndRow(\n    move: Move,\n    gameState: GameState\n  ): boolean {\n    const piece = gameState.board.getPiece(move.from);\n    if (piece === null) throw new ChessGameEngineError(\"Piece is null\");\n\n    const isPromotion =\n      (piece.color === PlayerSideColour.white && move.to.rank === 8) ||\n      (piece.color === PlayerSideColour.black && move.to.rank === 1);\n\n    if (!isPromotion) {\n      return !move.hasPromotion;\n    }\n\n    // same as !move.hasPromotion but using this instead as it works as a type guard\n    if (move.promoteTo === null) return false;\n\n    const disallowedPromotionPieces = [\n      Piece.WhiteKing,\n      Piece.WhitePawn,\n      Piece.BlackKing,\n      Piece.BlackPawn\n    ];\n    if (disallowedPromotionPieces.includes(move.promoteTo)) return false;\n\n    return piece.color === move.promoteTo.color;\n  }\n\n  private isValidAttackingMove(move: Move, gameState: GameState): boolean {\n    const piece = gameState.board.getPiece(move.from);\n    if (piece === null) throw new ChessGameEngineError(\"Piece is null\");\n\n    const leftAttackFileDelta = piece.color === PlayerSideColour.white ? -1 : 1;\n    const rightAttackFileDelta = -leftAttackFileDelta;\n\n    const isCaseValid = (fileDelta: number): boolean => {\n      const potentialAttackCoordinates = this.getAttackingCoordinates(\n        move.from,\n        piece.color,\n        fileDelta\n      );\n      if (potentialAttackCoordinates === null) return false;\n\n      const pieceOnAttackCoordinates = gameState.board.getPiece(\n        potentialAttackCoordinates\n      );\n      const targetFieldHasOppositeColorPiece =\n        pieceOnAttackCoordinates != null &&\n        pieceOnAttackCoordinates.color !== piece.color;\n\n      return (\n        move.to.referentialEquals(potentialAttackCoordinates) &&\n        targetFieldHasOppositeColorPiece\n      );\n    };\n\n    return (\n      isCaseValid(leftAttackFileDelta) || isCaseValid(rightAttackFileDelta)\n    );\n  }\n\n  private isValidEnPassantMove(move: Move, gameState: GameState): boolean {\n    const piece = gameState.board.getPiece(move.from);\n    if (piece === null) throw new ChessGameEngineError(\"Piece is null\");\n\n    const leftEnPassantCoordinates = this.getAttackingCoordinates(\n      move.from,\n      piece.color,\n      -1\n    );\n    const rightEnPassantCoordinates = this.getAttackingCoordinates(\n      move.from,\n      piece.color,\n      1\n    );\n\n    return (\n      (move.to.referentialEquals(leftEnPassantCoordinates) ||\n        move.to.referentialEquals(rightEnPassantCoordinates)) &&\n      move.to.referentialEquals(gameState.enPassant)\n    );\n  }\n\n  private isValidForwardMove(move: Move, gameState: GameState): boolean {\n    const doesChangeFile = move.to.file !== move.from.file;\n    if (doesChangeFile) return false;\n\n    const piece = gameState.board.getPiece(move.from);\n    if (piece === null) throw new ChessGameEngineError(\"Piece is null\");\n\n    const whiteInitialPawnRank = 2;\n    const blackInitialPawnRank = 7;\n    const isInitialField =\n      (piece.color === PlayerSideColour.white &&\n        move.from.rank === whiteInitialPawnRank) ||\n      (piece.color === PlayerSideColour.black &&\n        move.from.rank === blackInitialPawnRank);\n    const traversalCoordinatesLimit = isInitialField ? 2 : 1;\n\n    return PieceTraversal.canTraverse(\n      move,\n      gameState.board,\n      false,\n      traversalCoordinatesLimit\n    );\n  }\n\n  private landsOnSquareWithEmptyOrOppositePiece(\n    move: Move,\n    gameState: GameState\n  ): boolean {\n    const piece = gameState.board.getPiece(move.from);\n    if (piece === null) throw new ChessGameEngineError(\"Piece is null\");\n\n    const targetPiece = gameState.board.getPiece(move.to);\n    if (targetPiece === null) return true;\n\n    return piece.color !== targetPiece.color;\n  }\n}\n","import PieceRules from \"./PieceRules\";\nimport Move from \"../../Move\";\nimport GameState from \"../../GameState\";\nimport PieceTraversal from \"./PieceTraversal\";\n\nexport default class BishopRules implements PieceRules {\n  isMoveValid(move: Move, gameState: GameState): boolean {\n    return (\n      !move.hasPromotion &&\n      move.isDiagonal &&\n      PieceTraversal.canTraverse(move, gameState.board, true)\n    );\n  }\n}\n","import PieceRules from \"./PieceRules\";\nimport Move from \"../../Move\";\nimport GameState from \"../../GameState\";\nimport PieceTraversal from \"./PieceTraversal\";\n\nexport default class RookRules implements PieceRules {\n  isMoveValid(move: Move, gameState: GameState): boolean {\n    return (\n      !move.hasPromotion &&\n      move.isHorizontalOrVertical &&\n      PieceTraversal.canTraverse(move, gameState.board, true)\n    );\n  }\n}\n","import Move from \"../../Move\";\nimport GameState from \"../../GameState\";\nimport RookRules from \"./RookRules\";\nimport BishopRules from \"./BishopRules\";\nimport PieceRules from \"./PieceRules\";\n\nexport default class QueenRules implements PieceRules {\n  isMoveValid(move: Move, gameState: GameState): boolean {\n    return (\n      new RookRules().isMoveValid(move, gameState) ||\n      new BishopRules().isMoveValid(move, gameState)\n    );\n  }\n}\n","enum GameStatus {\n  ongoing = \"ongoing\",\n  ongoingWhiteKingInCheck = \"ongoing, white king in check\",\n  ongoingBlackKingInCheck = \"ongoing, black king in check\",\n  checkmateWhiteWon = \"checkmate, white won\",\n  checkmateBlackWon = \"checkmate, black won\",\n  drawStalemate = \"draw, stalemate\",\n  drawThreefoldRepetition = \"draw, threefold repetition\",\n  draw50MoveRule = \"draw, 50 move rule\"\n}\n\n// TODO TPX draw not enough material\n\nexport const ongoingGameStatuses = [\n  GameStatus.ongoing,\n  GameStatus.ongoingWhiteKingInCheck,\n  GameStatus.ongoingBlackKingInCheck\n];\n\nexport default GameStatus;\n","import PieceRules from \"./PieceRules\";\nimport Move from \"../../Move\";\nimport GameState from \"../../GameState\";\nimport QueenRules from \"./QueenRules\";\nimport Castling, { CastlingService } from \"../../Castling\";\nimport PlayerSideColour from \"../../PlayerSideColour\";\nimport ChessGameEngineError from \"../../ChessGameEngineError\";\nimport ChessRules from \"../ChessRules\";\nimport CoordinatesCalculator from \"../../chessboard/CoordinatesCalculator\";\nimport Coordinates from \"../../chessboard/Coordinates\";\n\nexport default class KingRules implements PieceRules {\n  private readonly _kingCastlingRules = new KingCastlingRules();\n\n  isMoveValid(move: Move, gameState: GameState): boolean {\n    return (\n      !move.hasPromotion &&\n      (this._kingCastlingRules.isValidCastling(move, gameState) ||\n        (!this.movesByMoreThanOneField(move) &&\n          new QueenRules().isMoveValid(move, gameState)))\n    );\n  }\n\n  private movesByMoreThanOneField(move: Move): boolean {\n    return Math.abs(move.fileDelta) > 1 || Math.abs(move.rankDelta) > 1;\n  }\n}\n\nclass KingCastlingRules {\n  private readonly _chessRules: ChessRules = new ChessRules();\n\n  isValidCastling(move: Move, gameState: GameState): boolean {\n    const castling = CastlingService.kingMoveToCastling(move);\n    if (castling === null) return false;\n\n    return (\n      gameState.castlings.includes(castling) &&\n      !this.isPieceBetweenKingAndRook(castling, gameState) &&\n      !this.kingMovesThroughAttackedField(castling, move, gameState)\n    );\n  }\n\n  private getCoordinatesBetweenKingAndRook(castling: Castling): Coordinates[] {\n    let result: Coordinates[] = [];\n\n    const kingCoordinates: Coordinates = CastlingService.getCastlingKingCoordinates(\n      castling\n    );\n\n    let kingToRookFileDelta;\n    switch (castling) {\n      case Castling.whiteKingside:\n      case Castling.blackKingside:\n        kingToRookFileDelta = 3;\n        break;\n      case Castling.whiteQueenside:\n      case Castling.blackQueenside:\n        kingToRookFileDelta = -4;\n        break;\n      default:\n        throw new ChessGameEngineError(\"Invalid castling.\");\n    }\n\n    for (\n      let fileDelta = Math.sign(kingToRookFileDelta);\n      Math.abs(fileDelta) < Math.abs(kingToRookFileDelta);\n      fileDelta += Math.sign(kingToRookFileDelta)\n    ) {\n      result.push(CoordinatesCalculator.add(kingCoordinates, fileDelta, 0));\n    }\n\n    return result;\n  }\n\n  private isPieceBetweenKingAndRook(\n    castling: Castling,\n    gameState: GameState\n  ): boolean {\n    for (let coordinates of this.getCoordinatesBetweenKingAndRook(castling)) {\n      if (gameState.board.getPiece(coordinates) !== null) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private kingMovesThroughAttackedField(\n    castling: Castling,\n    move: Move,\n    gameState: GameState\n  ): boolean {\n    const isKingAttacked = this._chessRules.isSquareAttacked(\n      move.from,\n      gameState,\n      CastlingService.getCastlingColor(castling) === PlayerSideColour.white\n        ? PlayerSideColour.black\n        : PlayerSideColour.white\n    );\n    if (isKingAttacked) return true;\n\n    for (let coordinates of this.getCoordinatesBetweenKingAndRook(castling)) {\n      if (\n        this._chessRules.isSquareAttacked(\n          coordinates,\n          gameState,\n          CastlingService.getCastlingColor(castling) === PlayerSideColour.white\n            ? PlayerSideColour.black\n            : PlayerSideColour.white\n        )\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n","import PieceRules from \"./PieceRules\";\nimport Move from \"../../Move\";\nimport GameState from \"../../GameState\";\nimport ChessGameEngineError from \"../../ChessGameEngineError\";\nimport CoordinatesCalculator from \"../../chessboard/CoordinatesCalculator\";\nimport Coordinates from \"../../chessboard/Coordinates\";\n\nexport default class KnightRules implements PieceRules {\n  isMoveValid(move: Move, gameState: GameState): boolean {\n    return (\n      !move.hasPromotion &&\n      this.getPossibleLandingCoordinates(move.from).some(\n        plc =>\n          move.to.referentialEquals(plc) &&\n          this.landsOnEmptyOrOppositeColor(move, gameState)\n      )\n    );\n  }\n\n  private getPossibleLandingCoordinates(from: Coordinates): Coordinates[] {\n    const result = [];\n    const knightDirections = [-1, 1];\n\n    for (const rankDirection of knightDirections) {\n      for (const fileDirection of knightDirections) {\n        let coordinates = CoordinatesCalculator.tryAdd(\n          from,\n          fileDirection,\n          rankDirection * 2\n        );\n        if (coordinates !== null) result.push(coordinates);\n\n        coordinates = CoordinatesCalculator.tryAdd(\n          from,\n          fileDirection * 2,\n          rankDirection\n        );\n        if (coordinates !== null) result.push(coordinates);\n      }\n    }\n\n    return result;\n  }\n\n  private landsOnEmptyOrOppositeColor(\n    move: Move,\n    gameState: GameState\n  ): boolean {\n    const knightPiece = gameState.board.getPiece(move.from);\n\n    if (knightPiece === null) throw new ChessGameEngineError(\"Knight is null.\");\n\n    const toFieldPiece = gameState.board.getPiece(move.to);\n    return toFieldPiece === null || toFieldPiece.color !== knightPiece.color;\n  }\n}\n","import ValueObject from \"../../seedwork/ValueObject\";\nimport Piece, { pieceAlgebraicNotation } from \"../Piece\";\nimport Move from \"../Move\";\nimport Coordinates from \"./Coordinates\";\nimport Rank, { ranks } from \"./Rank\";\nimport File, { files } from \"./File\";\n\nexport default class Chessboard extends ValueObject<Chessboard> {\n  static readonly allCoordinates: Coordinates[] = Chessboard.getAllCoordinates();\n  private _internalState: (Piece | null)[][] = [...Array(8)].map(() =>\n    Array(8).fill(null)\n  );\n\n  private constructor() {\n    super();\n  }\n\n  static fromFen(fen: string): Chessboard {\n    const result = new Chessboard();\n\n    let fileIndex = 0;\n    let rankIndex = ranks.length - 1;\n\n    const fenPiecePart = fen.split(\" \")[0];\n    for (let i = 0; i < fenPiecePart.length; i++) {\n      if (fen[i] === \"/\") {\n        rankIndex--;\n        fileIndex = 0;\n        continue;\n      }\n\n      const asNumber = parseInt(fen[i], 10);\n      if (!isNaN(asNumber)) {\n        fileIndex += asNumber;\n        continue;\n      }\n\n      const internalRow = Chessboard.rankToRow(ranks[rankIndex]);\n      const internalColumn = Chessboard.fileToColumn(files[fileIndex]);\n      result._internalState[internalRow][\n        internalColumn\n      ] = Piece.fromAlgebraicNotation(fen[i] as pieceAlgebraicNotation);\n      fileIndex++;\n    }\n\n    return result;\n  }\n\n  private static fileToColumn(file: File): number {\n    return file.charCodeAt(0) - \"a\".charCodeAt(0);\n  }\n\n  private static getAllCoordinates(): Coordinates[] {\n    let result = [];\n\n    for (const file of files)\n      for (const rank of ranks) {\n        const coordinates = new Coordinates(file, rank);\n        result.push(coordinates);\n      }\n\n    return result;\n  }\n\n  private static rankToRow(rank: Rank): number {\n    return rank - 1;\n  }\n\n  findPieceCoordinates(piece: Piece): Coordinates[] {\n    const result: Coordinates[] = [];\n\n    for (let squareCoordinates of Chessboard.allCoordinates) {\n      const pieceOnCoordinates = this.getPiece(squareCoordinates);\n\n      if (pieceOnCoordinates === piece) {\n        result.push(squareCoordinates);\n      }\n    }\n\n    return result;\n  }\n\n  getPiece(position: Coordinates): Piece | null {\n    const internalRow = Chessboard.rankToRow(position.rank);\n    const internalColumn = Chessboard.fileToColumn(position.file);\n\n    return this._internalState[internalRow][internalColumn];\n  }\n\n  isPieceOnSquare = (squareCoordinates: Coordinates) => {\n    return this.getPiece(squareCoordinates) !== null;\n  };\n\n  toFen(): string {\n    let result = \"\";\n\n    let emptyPieceCounter = 0;\n    const writeDownAndResetEmptyPieceCounterIfIsNot0 = (): void => {\n      if (emptyPieceCounter !== 0) {\n        result += emptyPieceCounter;\n        emptyPieceCounter = 0;\n      }\n    };\n\n    for (let rankIndex = ranks.length - 1; rankIndex >= 0; rankIndex--) {\n      for (let fileIndex = 0; fileIndex < files.length; fileIndex++) {\n        const current = this.getPiece(\n          new Coordinates(files[fileIndex], ranks[rankIndex])\n        );\n\n        if (current === null) emptyPieceCounter++;\n        else {\n          writeDownAndResetEmptyPieceCounterIfIsNot0();\n          result += current.algebraicNotation;\n        }\n      }\n      writeDownAndResetEmptyPieceCounterIfIsNot0();\n\n      if (rankIndex !== 0) result += \"/\";\n    }\n\n    return result;\n  }\n\n  withMove(move: Move): Chessboard {\n    const piece = this.getPiece(move.from);\n    return this.withPiece(move.from, null).withPiece(move.to, piece);\n  }\n\n  withPiece(position: Coordinates, piece: Piece | null): Chessboard {\n    const internalRow = Chessboard.rankToRow(position.rank);\n    const internalColumn = Chessboard.fileToColumn(position.file);\n\n    const clone = this.clone();\n    clone._internalState[internalRow][internalColumn] = piece;\n\n    return clone;\n  }\n\n  private clone(): Chessboard {\n    const clone = new Chessboard();\n    clone._internalState = JSON.parse(JSON.stringify(this._internalState));\n\n    return clone;\n  }\n}\n","enum FenSetup {\n  defaultInitial = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n  empty = \"8/8/8/8/8/8/8/8 - - 0 1\"\n}\n\nexport default FenSetup;\n","import Move from \"../Move\";\nimport GameState, { GameStateHistory } from \"../GameState\";\nimport PawnRules from \"./pieces/PawnRules\";\nimport BishopRules from \"./pieces/BishopRules\";\nimport RookRules from \"./pieces/RookRules\";\nimport QueenRules from \"./pieces/QueenRules\";\nimport KingRules from \"./pieces/KingRules\";\nimport KnightRules from \"./pieces/KnightRules\";\nimport Piece from \"../Piece\";\nimport PlayerSideColour from \"../PlayerSideColour\";\nimport Chessboard from \"../chessboard/Chessboard\";\nimport GameStatus from \"../GameStatus\";\nimport ChessGameEngineError from \"../ChessGameEngineError\";\nimport Service from \"../../seedwork/Service\";\nimport Coordinates from \"../chessboard/Coordinates\";\n\nexport default class ChessRules implements Service {\n  getGameStatus(gameStateHistory: GameStateHistory): GameStatus {\n    if (gameStateHistory.length === 0)\n      throw new ChessGameEngineError(\"Empty game history\");\n\n    let currentGameState = gameStateHistory[gameStateHistory.length - 1];\n\n    if (this.isCheckmate(currentGameState))\n      return currentGameState.currentColor === PlayerSideColour.white\n        ? GameStatus.checkmateBlackWon\n        : GameStatus.checkmateWhiteWon;\n\n    if (this.isStalemate(currentGameState)) return GameStatus.drawStalemate;\n\n    if (this.isDraw50MoveRule(currentGameState))\n      return GameStatus.draw50MoveRule;\n\n    if (this.isDrawThreefoldRepetition(gameStateHistory))\n      return GameStatus.drawThreefoldRepetition;\n\n    if (this.isKingInCheck(currentGameState))\n      return currentGameState.currentColor === PlayerSideColour.white\n        ? GameStatus.ongoingWhiteKingInCheck\n        : GameStatus.ongoingBlackKingInCheck;\n\n    return GameStatus.ongoing;\n  }\n\n  isMoveValid(\n    move: Move,\n    gameState: GameState,\n    checkIfKingSafe = true\n  ): boolean {\n    const piece = gameState.board.getPiece(move.from);\n\n    if (piece === null) return false;\n\n    let pieceRules = this.getPieceRules(piece);\n\n    return (\n      pieceRules.isMoveValid(move, gameState) &&\n      (!checkIfKingSafe || !this.isKingInCheckAfterMove(move, gameState))\n    );\n  }\n\n  isSquareAttacked(\n    targetCoordinates: Coordinates,\n    gameState: GameState,\n    attackedByColor: PlayerSideColour\n  ): boolean {\n    for (let squareCoordinates of Chessboard.allCoordinates) {\n      const piece = gameState.board.getPiece(squareCoordinates);\n      if (piece && piece.color !== attackedByColor) continue;\n      if (piece === null) continue;\n\n      const attackingPieceMove = new Move(squareCoordinates, targetCoordinates);\n\n      const potentialPromotion =\n        piece.color === PlayerSideColour.white\n          ? Piece.WhiteQueen\n          : Piece.BlackQueen;\n      const attackingPieceMoveWithPromotion = new Move(\n        squareCoordinates,\n        targetCoordinates,\n        potentialPromotion\n      );\n\n      if (\n        this.isMoveValid(attackingPieceMove, gameState, false) ||\n        this.isMoveValid(attackingPieceMoveWithPromotion, gameState, false)\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private getPieceRules(piece: Piece) {\n    switch (piece) {\n      case Piece.WhitePawn:\n      case Piece.BlackPawn:\n        return new PawnRules();\n      case Piece.WhiteBishop:\n      case Piece.BlackBishop:\n        return new BishopRules();\n      case Piece.WhiteRook:\n      case Piece.BlackRook:\n        return new RookRules();\n      case Piece.WhiteQueen:\n      case Piece.BlackQueen:\n        return new QueenRules();\n      case Piece.WhiteKing:\n      case Piece.BlackKing:\n        return new KingRules();\n      case Piece.WhiteKnight:\n      case Piece.BlackKnight:\n        return new KnightRules();\n      default:\n        throw new ChessGameEngineError(\"Invalid piece.\");\n    }\n  }\n\n  private canMoveAnyPiece(gameState: GameState) {\n    const hasAnyMove = (from: Coordinates): boolean => {\n      for (let coordinates of Chessboard.allCoordinates) {\n        if (this.isMoveValid(new Move(from, coordinates), gameState)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    for (let coordinates of Chessboard.allCoordinates) {\n      let piece = gameState.board.getPiece(coordinates);\n\n      if (piece === null || piece.color !== gameState.currentColor) continue;\n\n      if (hasAnyMove(coordinates)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private isCheckmate(gameState: GameState): boolean {\n    return this.isKingInCheck(gameState) && !this.canMoveAnyPiece(gameState);\n  }\n\n  private isDraw50MoveRule(gameState: GameState): boolean {\n    return gameState.halfMoveClock === 100;\n  }\n\n  private isDrawThreefoldRepetition(\n    gameStateHistory: GameStateHistory\n  ): boolean {\n    const fenToCount = gameStateHistory.reduce(\n      (acc, gs) =>\n        acc.set(gs.board.toFen(), (acc.get(gs.board.toFen()) || 0) + 1),\n      new Map<string, number>()\n    );\n    return Array.from(fenToCount.values()).includes(3);\n  }\n\n  private isKingInCheck(gameState: GameState): boolean {\n    const kingCoordinates = gameState.board.findPieceCoordinates(\n      gameState.currentColor === PlayerSideColour.white\n        ? Piece.WhiteKing\n        : Piece.BlackKing\n    )[0];\n\n    const oppositeColor =\n      gameState.currentColor === PlayerSideColour.white\n        ? PlayerSideColour.black\n        : PlayerSideColour.white;\n\n    if (this.isSquareAttacked(kingCoordinates, gameState, oppositeColor))\n      return true;\n\n    return false;\n  }\n\n  private isKingInCheckAfterMove(move: Move, gameState: GameState): boolean {\n    const afterMoveGameState = gameState.withBoard(\n      gameState.board.withMove(move)\n    );\n\n    return this.isKingInCheck(afterMoveGameState);\n  }\n\n  private isStalemate(gameState: GameState): boolean {\n    return !this.isKingInCheck(gameState) && !this.canMoveAnyPiece(gameState);\n  }\n}\n","import ValueObject from \"../seedwork/ValueObject\";\n\nexport class UndoRequest extends ValueObject<UndoRequest> {}\n","import Player from \"./Player\";\nimport Move from \"../Move\";\nimport GameState from \"../GameState\";\nimport { UndoRequest } from \"../UndoRequest\";\n\nexport default class HumanPlayer implements Player {\n  private _resolveGetMovePromise:\n    | ((arg: Move | UndoRequest) => void)\n    | null = null;\n\n  async getMove(fen: GameState): Promise<Move | UndoRequest> {\n    return new Promise(resolve => {\n      this._resolveGetMovePromise = resolve;\n    });\n  }\n\n  makeMove(move: Move): void {\n    if (this._resolveGetMovePromise === null) return;\n\n    this._resolveGetMovePromise(move);\n    this._resolveGetMovePromise = null;\n  }\n\n  requestUndo(): void {\n    if (this._resolveGetMovePromise === null) return;\n\n    this._resolveGetMovePromise(new UndoRequest());\n    this._resolveGetMovePromise = null;\n  }\n}\n","import Player from \"./players/Player\";\nimport GameState, { GameStateHistory } from \"./GameState\";\nimport Move from \"./Move\";\nimport ChessRules from \"./rules/ChessRules\";\nimport PlayerSideColour from \"./PlayerSideColour\";\nimport Entity from \"../seedwork/Entity\";\nimport { UndoRequest } from \"./UndoRequest\";\nimport { ongoingGameStatuses } from \"./GameStatus\";\nimport HumanPlayer from \"./players/HumanPlayer\";\nimport ChessGameEngineError from \"./ChessGameEngineError\";\n\nexport default class Game implements Entity {\n  private _gameStateHistory: GameStateHistory = [];\n  private _moveProcessedSubscribers: (() => void)[] = [];\n\n  constructor(\n    initialPosition: GameState,\n    readonly playerWhite: Player,\n    readonly playerBlack: Player,\n    readonly ruleEngine = new ChessRules()\n  ) {\n    this._gameStateHistory.push(initialPosition);\n\n    this.startGame();\n  }\n\n  getCurrentPlayer(): Player {\n    return this.getCurrentState().currentColor === PlayerSideColour.white\n      ? this.playerWhite\n      : this.playerBlack;\n  }\n\n  getCurrentState(): GameState {\n    return this._gameStateHistory[this._gameStateHistory.length - 1];\n  }\n\n  getCurrentStatus() {\n    return this.ruleEngine.getGameStatus(this._gameStateHistory);\n  }\n\n  subscribeMoveProcessed(observerCallback: () => void): void {\n    this._moveProcessedSubscribers.push(observerCallback);\n  }\n\n  private awaitUndoRequestedAfterGameFinished(): Promise<void> {\n    let requestPlayerMove = (player: Player, resolve: () => void) =>\n      player.getMove(this.getCurrentState()).then(value => {\n        if (value instanceof UndoRequest) resolve();\n        else requestPlayerMove(player, resolve);\n      });\n    return new Promise(resolve => {\n      if (this.playerWhite instanceof HumanPlayer)\n        requestPlayerMove(this.playerWhite, resolve);\n      if (this.playerBlack instanceof HumanPlayer)\n        requestPlayerMove(this.playerBlack, resolve);\n    });\n  }\n\n  private makeMoveIfValid(move: Move): void {\n    const makeMoveIfValidWithoutNotifyMoveProcessed = () => {\n      const currentPiece = this.getCurrentState().board.getPiece(move.from);\n\n      if (currentPiece === null) return;\n\n      const isMovingOtherPlayerPiece =\n        currentPiece.color !== this.getCurrentState().currentColor;\n      if (isMovingOtherPlayerPiece) return;\n\n      if (!this.ruleEngine.isMoveValid(move, this.getCurrentState())) {\n        if (!(this.getCurrentPlayer() instanceof HumanPlayer)) {\n          throw new ChessGameEngineError(\n            `Non-human player made an invalid move: ${move.toUciString()}.`\n          );\n        }\n        return;\n      }\n\n      let afterMoveState = this.getCurrentState().afterMove(move);\n\n      this._gameStateHistory = [...this._gameStateHistory, afterMoveState];\n    };\n\n    makeMoveIfValidWithoutNotifyMoveProcessed();\n    this.notifyMoveProcessed();\n  }\n\n  private notifyMoveProcessed(): void {\n    this._moveProcessedSubscribers.forEach(s => s());\n  }\n\n  private async startGame(): Promise<void> {\n    while (true) {\n      if (ongoingGameStatuses.includes(this.getCurrentStatus())) {\n        let move = await this.getCurrentPlayer().getMove(\n          this.getCurrentState()\n        );\n\n        if (move instanceof UndoRequest) this.undoFullMove();\n        else this.makeMoveIfValid(move);\n      } else {\n        await this.awaitUndoRequestedAfterGameFinished();\n        this.undoFullMove();\n      }\n    }\n  }\n\n  private undoFullMove(): void {\n    const undoFullMoveWithoutNotifyMoveProcessed = () => {\n      if (this._gameStateHistory.length <= 1) return;\n\n      const fullMoveMoves = 2;\n      // if it's the first move, undo only a single one\n      const movesToGoBack =\n        this._gameStateHistory.length <= fullMoveMoves ? 1 : 2;\n\n      this._gameStateHistory = this._gameStateHistory.slice(\n        0,\n        this._gameStateHistory.length - movesToGoBack\n      );\n\n      return;\n    };\n\n    undoFullMoveWithoutNotifyMoveProcessed();\n    this.notifyMoveProcessed();\n  }\n}\n","import ValueObject from \"../seedwork/ValueObject\";\nimport Chessboard from \"./chessboard/Chessboard\";\nimport PlayerSideColour from \"./PlayerSideColour\";\nimport Castling, { CastlingService } from \"./Castling\";\nimport Move from \"./Move\";\nimport Piece from \"./Piece\";\nimport ChessGameEngineError from \"./ChessGameEngineError\";\nimport Coordinates from \"./chessboard/Coordinates\";\nimport Rank from \"./chessboard/Rank\";\n\nexport type GameStateHistory = GameState[];\n\nexport default class GameState extends ValueObject<GameState> {\n  private readonly _fen: string;\n\n  private constructor(fen: string) {\n    super();\n\n    this._fen = fen;\n  }\n\n  private _board: Chessboard | undefined;\n\n  get board(): Chessboard {\n    return (this._board = this._board || Chessboard.fromFen(this._fen));\n  }\n\n  get castlings(): Castling[] {\n    const castlingsString = this._fen.split(\" \")[2];\n    if (castlingsString === \"-\") return [];\n\n    return castlingsString.split(\"\").map(c => c as Castling);\n  }\n\n  get currentColor(): PlayerSideColour {\n    let fenPlayerColor = this._fen.split(\" \")[1];\n    switch (fenPlayerColor) {\n      case \"w\":\n        return PlayerSideColour.white;\n      case \"b\":\n        return PlayerSideColour.black;\n      default:\n        throw new ChessGameEngineError(\"Invalid player color\");\n    }\n  }\n\n  get enPassant(): Coordinates | null {\n    const enPassantString = this._fen.split(\" \")[3];\n\n    if (enPassantString === \"-\") return null;\n\n    return Coordinates.fromAlgebraicNotation(enPassantString);\n  }\n\n  get fen(): string {\n    return this._fen;\n  }\n\n  get fullMoveNumber(): number {\n    return parseInt(this._fen.split(\" \")[5]);\n  }\n\n  get halfMoveClock(): number {\n    return parseInt(this._fen.split(\" \")[4], 10);\n  }\n\n  static fromFen(fen: string): GameState {\n    return new GameState(fen);\n  }\n\n  static fromParts(\n    board: Chessboard,\n    currentColor: PlayerSideColour,\n    castlingsAvailable: Castling[],\n    enPassantAvailable: Coordinates | null,\n    halfMoveClock: number,\n    fullMoveNumber: number\n  ): GameState {\n    const currentColorString =\n      currentColor === PlayerSideColour.white ? \"w\" : \"b\";\n\n    const castlingsString =\n      castlingsAvailable.length === 0\n        ? \"-\"\n        : castlingsAvailable.sort().join(\"\");\n\n    const enPassantString =\n      (enPassantAvailable && enPassantAvailable.toAlgebraicNotationString()) ||\n      \"-\";\n\n    return GameState.fromFen(\n      `${board.toFen()} ${currentColorString} ${castlingsString} ${enPassantString} ${halfMoveClock} ${fullMoveNumber}`\n    );\n  }\n\n  afterMove(move: Move): GameState {\n    let boardAfterMove: Chessboard = this.getBoardAfterMove(move);\n\n    const nextColor = this.getColorAfterMove();\n    const castlingsAvailable = this.getCastlings(move);\n    const enPassantAvailable = this.getEnPassantStateAfterMove(move);\n    const halfMoveClock = this.getHalfMoveClockAfterMove(move);\n    const fullMoveNumber = this.getFullMoveNumberAfterMove();\n\n    return GameState.fromParts(\n      boardAfterMove,\n      nextColor,\n      castlingsAvailable,\n      enPassantAvailable,\n      halfMoveClock,\n      fullMoveNumber\n    );\n  }\n\n  withBoard(board: Chessboard): GameState {\n    return GameState.fromParts(\n      board,\n      this.currentColor,\n      this.castlings,\n      this.enPassant,\n      this.halfMoveClock,\n      this.fullMoveNumber\n    );\n  }\n\n  private getBoardAfterMove(move: Move): Chessboard {\n    let boardAfterMove: Chessboard = this.board;\n\n    const piece = this.board.getPiece(move.from);\n    if (piece === null) throw new ChessGameEngineError(\"Move from is null\");\n\n    if (CastlingService.isCastling(piece, move)) {\n      const castlingMoves = CastlingService.castlingToMoves(\n        CastlingService.kingMoveToCastling(move)!\n      );\n      for (const castlingMove of castlingMoves) {\n        const piece = this.board.getPiece(castlingMove.from);\n\n        boardAfterMove = boardAfterMove\n          .withPiece(castlingMove.from, null)\n          .withPiece(castlingMove.to, piece);\n      }\n    } else {\n      const toFieldPiece = move.promoteTo || piece;\n\n      boardAfterMove = boardAfterMove\n        .withPiece(move.from, null)\n        .withPiece(move.to, toFieldPiece);\n\n      if (\n        this.enPassant !== null &&\n        move.to.referentialEquals(this.enPassant)\n      ) {\n        const pawnCapturedOnEnPassantRank: Rank =\n          this.enPassant.rank === 3 ? 4 : 5;\n        boardAfterMove = boardAfterMove.withPiece(\n          new Coordinates(this.enPassant.file, pawnCapturedOnEnPassantRank),\n          null\n        );\n      }\n    }\n\n    return boardAfterMove;\n  }\n\n  private getCastlings(move: Move): Castling[] {\n    const castlingsAvailable = [];\n\n    const isRookMoving = (castling: Castling): boolean => {\n      const castlingRookCoordinates: Coordinates = CastlingService.getCastlingRookCoordinates(\n        castling\n      );\n\n      return move.from.referentialEquals(castlingRookCoordinates);\n    };\n\n    const isKingInValidCastlingPosition = (castling: Castling): boolean => {\n      switch (castling) {\n        case Castling.whiteKingside:\n        case Castling.whiteQueenside:\n          const whiteKingPosition = this.board.findPieceCoordinates(\n            Piece.WhiteKing\n          )[0];\n\n          return whiteKingPosition.referentialEquals(\n            Coordinates.fromAlgebraicNotation(\"e1\")\n          );\n        case Castling.blackKingside:\n        case Castling.blackQueenside:\n          const blackKingPosition = this.board.findPieceCoordinates(\n            Piece.BlackKing\n          )[0];\n\n          return blackKingPosition.referentialEquals(\n            Coordinates.fromAlgebraicNotation(\"e8\")\n          );\n        default:\n          throw new ChessGameEngineError(\"Invalid castling.\");\n      }\n    };\n\n    const isRookInValidCastlingPosition = (castling: Castling): boolean => {\n      const rookPosition: Coordinates = CastlingService.getCastlingRookCoordinates(\n        castling\n      );\n\n      const castlingColor: PlayerSideColour = CastlingService.getCastlingColor(\n        castling\n      );\n\n      return castlingColor === PlayerSideColour.white\n        ? this.board.getPiece(rookPosition) === Piece.WhiteRook\n        : this.board.getPiece(rookPosition) === Piece.BlackRook;\n    };\n\n    const isKingMoving = (castling: Castling): boolean => {\n      const kingPosition = CastlingService.getCastlingKingCoordinates(castling);\n\n      return kingPosition.referentialEquals(move.from);\n    };\n\n    for (const castling of this.castlings) {\n      if (\n        isKingInValidCastlingPosition(castling) &&\n        isRookInValidCastlingPosition(castling) &&\n        !isKingMoving(castling) &&\n        !isRookMoving(castling)\n      )\n        castlingsAvailable.push(castling);\n    }\n\n    return castlingsAvailable;\n  }\n\n  private getColorAfterMove() {\n    return this.currentColor === PlayerSideColour.white\n      ? PlayerSideColour.black\n      : PlayerSideColour.white;\n  }\n\n  private getEnPassantStateAfterMove(move: Move): Coordinates | null {\n    const isPawn = (): boolean => {\n      const piece = this.board.getPiece(move.from);\n\n      return (\n        piece != null && [Piece.WhitePawn, Piece.BlackPawn].includes(piece)\n      );\n    };\n\n    const movesBy2Squares = (): boolean => {\n      return Math.abs(move.rankDelta) === 2;\n    };\n\n    const getEnPassantSquare = (): Coordinates => {\n      const rank: Rank = move.from.rank === 2 ? 3 : 6;\n      return new Coordinates(move.from.file, rank);\n    };\n\n    if (!isPawn()) return null;\n    if (movesBy2Squares()) return getEnPassantSquare();\n    return null;\n  }\n\n  private getFullMoveNumberAfterMove() {\n    return this.currentColor === PlayerSideColour.black\n      ? this.fullMoveNumber + 1\n      : this.fullMoveNumber;\n  }\n\n  private getHalfMoveClockAfterMove(move: Move) {\n    const isCapture = this.board.getPiece(move.to) !== null;\n\n    return isCapture ? 0 : this.halfMoveClock + 1;\n  }\n}\n","import GameState from \"./GameState\";\nimport FenSetup from \"./FenSetup\";\n\nexport default class GameStateSetup {\n  static defaultInitial = GameState.fromFen(FenSetup.defaultInitial);\n\n  static empty = GameState.fromFen(FenSetup.empty);\n}\n","import * as React from \"react\";\nimport Piece from \"../../model/chess/Piece\";\nimport \"./Square.css\";\nimport Coordinates from \"../../model/chess/chessboard/Coordinates\";\nimport File, { files } from \"../../model/chess/chessboard/File\";\nimport Rank, { ranks } from \"../../model/chess/chessboard/Rank\";\n\ninterface SquareProps {\n  file: File;\n  handleSquareSelected: (coordinates: Coordinates) => void;\n  isLegalPieceMove: boolean;\n  isSelected: boolean;\n  piece: Piece | null;\n  rank: Rank;\n}\n\nconst Square: React.FC<SquareProps> = ({\n  piece,\n  file,\n  rank,\n  isSelected,\n  isLegalPieceMove,\n  handleSquareSelected\n}) => {\n  const emptyCharacter = \"\\u00A0\";\n\n  const getCalculatedClasses: () => string = () => {\n    let classes = [];\n\n    const isLightSquare = (files.indexOf(file) + ranks.indexOf(rank)) % 2 === 1;\n\n    if (isLightSquare) classes.push(\"light\");\n    else classes.push(\"dark\");\n\n    if (isLegalPieceMove) classes.push(\"legal-piece-move\");\n\n    if (isSelected) classes.push(\"selected\");\n\n    return classes.join(\" \");\n  };\n  return (\n    <div\n      className={\n        \"chessboard-square d-flex justify-content-center align-items-center \" +\n        getCalculatedClasses()\n      }\n      onClick={() => handleSquareSelected(new Coordinates(file, rank))}\n      data-testid={`chessboard-square-${file}${rank}`}\n    >\n      <span>{piece ? piece.unicodeSymbol : emptyCharacter}</span>\n    </div>\n  );\n};\n\nexport default Square;\n","import Chessboard from \"../../model/chess/chessboard/Chessboard\";\nimport * as React from \"react\";\nimport { Col, Row } from \"reactstrap\";\nimport Square from \"./Square\";\nimport \"./ChessboardPresenter.css\";\nimport Coordinates from \"../../model/chess/chessboard/Coordinates\";\nimport { files } from \"../../model/chess/chessboard/File\";\nimport { ranks } from \"../../model/chess/chessboard/Rank\";\n\nexport interface ChessboardPresenter2Props {\n  chessboard: Chessboard;\n  handleSquareSelected: (coordinates: Coordinates) => void;\n  pieceLegalMoveCoordinates: Coordinates[];\n  reverseBoard: boolean;\n  selectedSquareCoordinates: Coordinates | null;\n}\n\nconst ChessboardPresenter = ({\n  chessboard,\n  reverseBoard,\n  selectedSquareCoordinates,\n  pieceLegalMoveCoordinates,\n  handleSquareSelected\n}: ChessboardPresenter2Props) => {\n  const ranksPresentation = reverseBoard ? [...ranks] : [...ranks].reverse();\n\n  return (\n    <Row>\n      <Col>\n        <div className=\"chessboard my-3\" data-testid=\"chessboard\">\n          {ranksPresentation.map(rank => (\n            <Row key={rank}>\n              {files.map(file => {\n                const coordinates = new Coordinates(file, rank);\n                return (\n                  <Square\n                    key={`${file}${rank}`}\n                    piece={chessboard.getPiece(new Coordinates(file, rank))}\n                    file={file}\n                    rank={rank}\n                    isSelected={coordinates.referentialEquals(\n                      selectedSquareCoordinates\n                    )}\n                    isLegalPieceMove={pieceLegalMoveCoordinates.some(lpc =>\n                      lpc.referentialEquals(coordinates)\n                    )}\n                    handleSquareSelected={handleSquareSelected}\n                  />\n                );\n              })}\n            </Row>\n          ))}\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nexport default ChessboardPresenter;\n","import Player from \"../../model/chess/players/Player\";\nimport GameStatus, { ongoingGameStatuses } from \"../../model/chess/GameStatus\";\nimport * as React from \"react\";\nimport HumanPlayer from \"../../model/chess/players/HumanPlayer\";\nimport { Button } from \"reactstrap\";\n\nexport interface UndoButtonProps {\n  currentPlayer: Player;\n  currentStatus: GameStatus;\n  players: Player[];\n}\n\nexport const UndoMoveButton: React.FC<UndoButtonProps> = ({\n  currentPlayer,\n  players,\n  currentStatus\n}) => {\n  const gameHasEnded = !ongoingGameStatuses.includes(currentStatus);\n  const anyPlayerIsHuman = players.some(p => p instanceof HumanPlayer);\n  const currentPlayerIsHuman = currentPlayer instanceof HumanPlayer;\n  const isUndoValid =\n    currentPlayerIsHuman || (gameHasEnded && anyPlayerIsHuman);\n\n  const handleUndo = () => {\n    if (!isUndoValid) return;\n\n    if (gameHasEnded && !currentPlayerIsHuman)\n      (players.find(\n        p => p instanceof HumanPlayer\n      ) as HumanPlayer).requestUndo();\n    else (currentPlayer as HumanPlayer).requestUndo();\n  };\n\n  return (\n    <Button\n      color=\"warning\"\n      onClick={handleUndo}\n      disabled={!isUndoValid}\n      data-testid=\"undo-move\"\n    >\n      Undo move\n    </Button>\n  );\n};\n\nexport default UndoMoveButton;\n","import Player from \"../../model/chess/players/Player\";\nimport Move from \"../../model/chess/Move\";\nimport GameState from \"../../model/chess/GameState\";\nimport Piece, { pieceAlgebraicNotation } from \"../../model/chess/Piece\";\nimport PlayerSideColour from \"../../model/chess/PlayerSideColour\";\nimport Coordinates from \"../../model/chess/chessboard/Coordinates\";\nimport { isRank } from \"../../model/chess/chessboard/Rank\";\nimport { isFile } from \"../../model/chess/chessboard/File\";\n\nexport default class StockfishPlayer implements Player {\n  private readonly _depth: number;\n  private _stockfishWorker: Worker;\n\n  constructor(depth = 1) {\n    this._depth = depth;\n    this._stockfishWorker = new Worker(\n      `${process.env.PUBLIC_URL}/stockfish-worker/stockfish.js`\n    );\n  }\n\n  async getMove({ currentColor, fen }: GameState): Promise<Move> {\n    return new Promise(async resolve => {\n      await this._stockfishWorker.postMessage(`position fen ${fen}`);\n      this._stockfishWorker.postMessage(`go depth ${this._depth}`);\n\n      this._stockfishWorker.onmessage = ev => {\n        const message = ev.data;\n\n        if (UciProtocolInterpreter.hasFoundBestMove(message)) {\n          let move = this.getMoveFromMessage(currentColor, message);\n          if (move !== null) resolve(move);\n        }\n      };\n    });\n  }\n\n  private getMoveFromMessage(\n    playerColor: PlayerSideColour,\n    message: string\n  ): Move | null {\n    const regex = /bestmove (\\w\\d\\w\\d)(\\w?)/;\n\n    const result = regex.exec(message);\n\n    if (result) {\n      const promoteToOutput =\n        result.length >= 2 && result[2] ? result[2] : null;\n\n      let promoteToPiece = null;\n      if (promoteToOutput !== null) {\n        const promoteToOutputWithProperCasing =\n          playerColor === PlayerSideColour.white\n            ? promoteToOutput.toUpperCase()\n            : promoteToOutput;\n\n        promoteToPiece =\n          promoteToOutput === null\n            ? null\n            : Piece.fromAlgebraicNotation(\n                promoteToOutputWithProperCasing as pieceAlgebraicNotation\n              );\n      }\n\n      const fromFile = result[1][0];\n      const fromRank = parseInt(result[1][1], 10);\n\n      if (!isFile(fromFile) || !isRank(fromRank))\n        throw new Error(\n          `Invalid from file/rank - file: ${fromFile} rank: ${fromRank}.`\n        );\n\n      const toFile = result[1][2];\n      const toRank = parseInt(result[1][3], 10);\n\n      if (!isFile(toFile) || !isRank(toRank))\n        throw new Error(\n          `Invalid to file/rank - file: ${toFile} rank: ${toRank}.`\n        );\n\n      const move = new Move(\n        new Coordinates(fromFile, fromRank),\n        new Coordinates(toFile, toRank),\n        promoteToPiece\n      );\n\n      return move;\n    }\n\n    return null;\n  }\n}\n\nclass UciProtocolInterpreter {\n  static hasFoundBestMove(message: string): boolean {\n    const finishedProcessingRegex = /bestmove/;\n\n    return finishedProcessingRegex.test(message);\n  }\n}\n","import React from \"react\";\nimport { Button, ButtonGroup, Col, Row } from \"reactstrap\";\nimport PlayerSideColour from \"../../model/chess/PlayerSideColour\";\nimport Piece from \"../../model/chess/Piece\";\nimport \"./PromotionPiecePicker.css\";\n\ninterface PromotionPiecePickerProps {\n  color: PlayerSideColour;\n  pickedPieceCallback: (piece: Piece | null) => void;\n}\n\nconst PromotionPiecePicker: React.FC<PromotionPiecePickerProps> = ({\n  color,\n  pickedPieceCallback\n}) => {\n  const allowedPromotionPieceWhiteVariants = [\n    Piece.WhiteQueen,\n    Piece.WhiteRook,\n    Piece.WhiteBishop,\n    Piece.WhiteKnight\n  ];\n\n  const getPieceProperColor = (\n    promotionPieceWhiteVariant: Piece,\n    color: PlayerSideColour\n  ) => {\n    switch (promotionPieceWhiteVariant) {\n      case Piece.WhiteQueen:\n        return color === PlayerSideColour.white\n          ? Piece.WhiteQueen\n          : Piece.BlackQueen;\n      case Piece.WhiteRook:\n        return color === PlayerSideColour.white\n          ? Piece.WhiteRook\n          : Piece.BlackRook;\n      case Piece.WhiteBishop:\n        return color === PlayerSideColour.white\n          ? Piece.WhiteBishop\n          : Piece.BlackBishop;\n      case Piece.WhiteKnight:\n        return color === PlayerSideColour.white\n          ? Piece.WhiteKnight\n          : Piece.BlackKnight;\n      default:\n        throw new Error(\"Invalid promotion piece\");\n    }\n  };\n\n  return (\n    <Row\n      className=\"mt-3\"\n      data-testid=\"promotion-piece-picker\"\n      id=\"promotion-piece-picker\"\n    >\n      <Col>\n        Promote to:{\" \"}\n        <ButtonGroup>\n          {allowedPromotionPieceWhiteVariants.map(whitePromotionPiece => {\n            const properColorPromotionPiece = getPieceProperColor(\n              whitePromotionPiece,\n              color\n            );\n\n            return (\n              <Button\n                key={properColorPromotionPiece.unicodeSymbol}\n                color=\"success\"\n                outline\n                onClick={() => pickedPieceCallback(properColorPromotionPiece)}\n              >\n                <span className=\"promotion-piece\">\n                  {properColorPromotionPiece.unicodeSymbol}\n                </span>\n              </Button>\n            );\n          })}\n          <Button outline onClick={() => pickedPieceCallback(null)}>\n            Cancel\n          </Button>\n        </ButtonGroup>\n      </Col>\n    </Row>\n  );\n};\n\nexport default PromotionPiecePicker;\n","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Button, ButtonGroup, Col, Row } from \"reactstrap\";\nimport Game from \"../../model/chess/Game\";\nimport HumanPlayer from \"../../model/chess/players/HumanPlayer\";\nimport Player from \"../../model/chess/players/Player\";\nimport ChessboardPresenter from \"./ChessboardPresenter\";\nimport Piece from \"../../model/chess/Piece\";\nimport Move from \"../../model/chess/Move\";\nimport GameState from \"../../model/chess/GameState\";\nimport PlayerSideColour from \"../../model/chess/PlayerSideColour\";\nimport Chessboard from \"../../model/chess/chessboard/Chessboard\";\nimport UndoMoveButton from \"./UndoMoveButton\";\nimport StockfishPlayer from \"../../infrastructure/stockfish/StockfishPlayer\";\nimport PromotionPiecePicker from \"./PromotionPiecePicker\";\nimport Coordinates from \"../../model/chess/chessboard/Coordinates\";\n\ninterface GameStatePresenterProps {\n  game: Game;\n}\n\nconst GameStatePresenter: React.FC<GameStatePresenterProps> = ({ game }) => {\n  const [currentStatus, setCurrentStatus] = useState(game.getCurrentStatus());\n  const [currentGameState, setCurrentGameState] = useState(\n    game.getCurrentState()\n  );\n  const [currentPlayer, setCurrentPlayer] = useState(game.getCurrentPlayer());\n  useEffect(() => {\n    game.subscribeMoveProcessed(() => {\n      setCurrentGameState(game.getCurrentState());\n      setCurrentStatus(game.getCurrentStatus());\n      setCurrentPlayer(game.getCurrentPlayer());\n    });\n  }, [game]);\n\n  const {\n    pickPromotionCallback,\n    handleSquareSelected,\n    savedSquareCoordinates\n  } = useHandlePlayerSquareSelection(\n    currentGameState,\n    currentPlayer,\n    (move, gameState) => game.ruleEngine.isMoveValid(move, gameState)\n  );\n\n  const reverseBoardInitial =\n    !(game.playerWhite instanceof HumanPlayer) &&\n    game.playerBlack instanceof HumanPlayer;\n  const [isBoardReversed, setIsBoardReversed] = useState(reverseBoardInitial);\n\n  const getPieceLegalMoveCoordinates = (\n    from: Coordinates | null\n  ): Coordinates[] => {\n    const result: Coordinates[] = [];\n\n    if (from === null) return result;\n    const piece = currentGameState.board.getPiece(from);\n\n    const isMoveToPromotion = (to: Coordinates, piece: Piece | null) => {\n      return (\n        (piece !== null && (piece === Piece.WhitePawn && to.rank === 8)) ||\n        (piece === Piece.BlackPawn && to.rank === 1)\n      );\n    };\n\n    for (let to of Chessboard.allCoordinates) {\n      // needs to consider that move will be legal after a player chooses a promotion piece\n      const surrogatePromoteTo =\n        currentGameState.currentColor === PlayerSideColour.white\n          ? Piece.WhiteQueen\n          : Piece.BlackQueen;\n      const move = isMoveToPromotion(to, piece)\n        ? new Move(from, to, surrogatePromoteTo)\n        : new Move(from, to);\n\n      if (game.ruleEngine.isMoveValid(move, currentGameState)) result.push(to);\n    }\n\n    return result;\n  };\n\n  const title =\n    game.playerWhite instanceof StockfishPlayer &&\n    game.playerBlack instanceof StockfishPlayer\n      ? \"it's a fish fight!\"\n      : \"shall we play?\";\n\n  return (\n    <Row>\n      <Col>\n        <Row>\n          <Col>\n            <h1>{title}</h1>\n            <h5>status: {currentStatus}</h5>\n            <ButtonGroup>\n              <UndoMoveButton\n                currentPlayer={game.getCurrentPlayer()}\n                players={[game.playerWhite, game.playerBlack]}\n                currentStatus={game.getCurrentStatus()}\n              />\n              <Button onClick={() => setIsBoardReversed(!isBoardReversed)}>\n                Reverse board\n              </Button>\n            </ButtonGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            {pickPromotionCallback && (\n              <PromotionPiecePicker\n                color={currentGameState.currentColor}\n                pickedPieceCallback={pickPromotionCallback}\n              />\n            )}\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <ChessboardPresenter\n              chessboard={game.getCurrentState().board}\n              reverseBoard={isBoardReversed}\n              pieceLegalMoveCoordinates={getPieceLegalMoveCoordinates(\n                savedSquareCoordinates\n              )}\n              selectedSquareCoordinates={savedSquareCoordinates}\n              handleSquareSelected={handleSquareSelected}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>Current turn: {game.getCurrentState().currentColor}</Col>\n        </Row>\n        <Row>\n          <Col>FEN: {game.getCurrentState().fen}</Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n};\n\nclass HandleSquareSelectedHelper {\n  static isEmptyFirstSelection(\n    piece: Piece | null,\n    savedSquareCoordinates: Coordinates | null\n  ) {\n    return (\n      piece === null &&\n      HandleSquareSelectedHelper.isSquareEmpty(savedSquareCoordinates)\n    );\n  }\n\n  static isMoveToPromotion(coordinates: Coordinates, piece: Piece | null) {\n    return (\n      (piece !== null &&\n        (piece === Piece.WhitePawn && coordinates.rank === 8)) ||\n      (piece === Piece.BlackPawn && coordinates.rank === 1)\n    );\n  }\n\n  static isNonHumanPlayer(player: Player) {\n    return !(player instanceof HumanPlayer);\n  }\n\n  static isNonOwnPieceFirstSelection(\n    piece: Piece | null,\n    currentPlayerColor: PlayerSideColour,\n    savedSquareCoordinates: Coordinates | null\n  ) {\n    return (\n      piece !== null &&\n      piece.color !== currentPlayerColor &&\n      savedSquareCoordinates === null\n    );\n  }\n\n  static isSquareEmpty(square: Coordinates | null): square is null {\n    return square === null;\n  }\n}\n\nconst useHandlePlayerSquareSelection: (\n  gameState: GameState,\n  currentPlayer: Player,\n  isMoveValid: (move: Move, gameState: GameState) => boolean\n) => {\n  handleSquareSelected: (coordinates: Coordinates) => void;\n  savedSquareCoordinates: Coordinates | null;\n  pickPromotionCallback: ((piece: Piece | null) => void) | null;\n} = (gameState, currentPlayer) => {\n  const [\n    savedSquareCoordinates,\n    setSavedSquareCoordinates\n  ] = useState<Coordinates | null>(null);\n\n  const [pickPromotionCallback, setPickPromotionCallback] = useState<\n    ((piece: Piece | null) => void) | null\n  >(null);\n  const getAskForPromotionPieceCallback = (\n    promotionMoveFrom: Coordinates,\n    promotionMoveTo: Coordinates\n  ) => (pickedPiece: Piece | null): void => {\n    if (pickedPiece !== null)\n      (currentPlayer as HumanPlayer).makeMove(\n        new Move(promotionMoveFrom, promotionMoveTo, pickedPiece)\n      );\n\n    setSavedSquareCoordinates(null);\n    setPickPromotionCallback(null);\n  };\n\n  const handleSquareSelected = (coordinates: Coordinates): void => {\n    const piece = gameState.board.getPiece(coordinates);\n\n    if (\n      HandleSquareSelectedHelper.isNonHumanPlayer(currentPlayer) ||\n      HandleSquareSelectedHelper.isEmptyFirstSelection(\n        piece,\n        savedSquareCoordinates\n      ) ||\n      HandleSquareSelectedHelper.isNonOwnPieceFirstSelection(\n        piece,\n        gameState.currentColor,\n        savedSquareCoordinates\n      )\n    )\n      return;\n\n    if (HandleSquareSelectedHelper.isSquareEmpty(savedSquareCoordinates)) {\n      setSavedSquareCoordinates(coordinates);\n      return;\n    }\n\n    const isSelectedSquareSameAsSavedSelectedSquare = savedSquareCoordinates.referentialEquals(\n      coordinates\n    );\n    if (isSelectedSquareSameAsSavedSelectedSquare) {\n      setSavedSquareCoordinates(null);\n      return;\n    }\n\n    const previouslySelectedPiece = gameState.board.getPiece(\n      savedSquareCoordinates\n    );\n    if (\n      HandleSquareSelectedHelper.isMoveToPromotion(\n        coordinates,\n        previouslySelectedPiece\n      )\n    ) {\n      setPickPromotionCallback(() =>\n        getAskForPromotionPieceCallback(savedSquareCoordinates, coordinates)\n      );\n\n      return;\n    }\n\n    (currentPlayer as HumanPlayer).makeMove(\n      new Move(savedSquareCoordinates, coordinates)\n    );\n    setSavedSquareCoordinates(null);\n  };\n\n  return {\n    handleSquareSelected,\n    savedSquareCoordinates,\n    pickPromotionCallback\n  };\n};\n\nexport default GameStatePresenter;\n","import React, { FunctionComponent, useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Col,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Row\n} from \"reactstrap\";\nimport Game from \"../../model/chess/Game\";\nimport GameStateSetup from \"../../model/chess/GameStateSetup\";\nimport HumanPlayer from \"../../model/chess/players/HumanPlayer\";\nimport GameStatePresenter from \"./GameStatePresenter\";\nimport StockfishPlayer from \"../../infrastructure/stockfish/StockfishPlayer\";\nimport { Formik } from \"formik\";\n\nconst GameCreator: FunctionComponent = () => {\n  const [chessGame, setChessGame] = useState<Game | null>(null);\n\n  return (\n    <Row>\n      <Col>\n        {chessGame == null ? (\n          <NewGameForm setChessGame={setChessGame} />\n        ) : (\n          <GameStatePresenter game={chessGame} />\n        )}\n      </Col>\n    </Row>\n  );\n};\n\ninterface NewGameFormProps {\n  setChessGame: (chessGame: Game | null) => void;\n}\n\nconst NewGameForm: FunctionComponent<NewGameFormProps> = ({ setChessGame }) => {\n  const stockfish = {\n    name: \"Stockfish\",\n    create: (depth: number) => new StockfishPlayer(depth)\n  };\n  const availablePlayers = [\n    { name: \"Human\", create: (depth: number) => new HumanPlayer() },\n    stockfish\n  ];\n\n  const shouldShowSlowProcessingAlert = (\n    playerWhiteName: string,\n    playerBlackName: string,\n    playerWhiteAnalysisDepth: number,\n    playerBlackAnalysisDepth: number\n  ) => {\n    const analysisDepthAlertThreshold = 15;\n\n    return (\n      (playerWhiteName === stockfish.name &&\n        playerWhiteAnalysisDepth >= analysisDepthAlertThreshold) ||\n      (playerBlackName === stockfish.name &&\n        playerBlackAnalysisDepth >= analysisDepthAlertThreshold)\n    );\n  };\n\n  return (\n    <>\n      <h1>Create a new game</h1>\n      <Formik\n        initialValues={{\n          selectedPlayerWhite: availablePlayers[0].name,\n          selectedPlayerBlack: availablePlayers[1].name,\n          playerWhiteAnalysisDepth: 1,\n          playerBlackAnalysisDepth: 1\n        }}\n        onSubmit={values => {\n          const playerWhiteInstance = availablePlayers\n            .find(ap => ap.name === values.selectedPlayerWhite)!\n            .create(values.playerWhiteAnalysisDepth);\n          const playerBlackInstance = availablePlayers\n            .find(ap => ap.name === values.selectedPlayerBlack)!\n            .create(values.playerBlackAnalysisDepth);\n\n          setChessGame(\n            new Game(\n              GameStateSetup.defaultInitial,\n              playerWhiteInstance,\n              playerBlackInstance\n            )\n          );\n        }}\n      >\n        {({ values, handleChange, handleSubmit }) => (\n          <Form>\n            {shouldShowSlowProcessingAlert(\n              values.selectedPlayerWhite,\n              values.selectedPlayerBlack,\n              values.playerWhiteAnalysisDepth,\n              values.playerBlackAnalysisDepth\n            ) && (\n              <Alert color=\"dark\">\n                If you find it's taking too much time to process a move,\n                consider lowering the analysis depth.\n              </Alert>\n            )}\n            <FormGroup>\n              <Label for=\"player-white\">White</Label>\n              <Input\n                id=\"player-white\"\n                type=\"select\"\n                name=\"selectedPlayerWhite\"\n                onChange={handleChange}\n                defaultValue={values.selectedPlayerWhite}\n                data-testid=\"player-white-selector\"\n              >\n                {availablePlayers.map(value => (\n                  <option key={value.name}>{value.name}</option>\n                ))}\n              </Input>\n            </FormGroup>\n            {values.selectedPlayerWhite === stockfish.name && (\n              <FormGroup>\n                <Label for=\"playerWhiteAnalysisDepth\">\n                  Engine analysis depth\n                </Label>\n                <Input\n                  type=\"number\"\n                  name=\"playerWhiteAnalysisDepth\"\n                  value={values.playerWhiteAnalysisDepth}\n                  onChange={handleChange}\n                />\n              </FormGroup>\n            )}\n            <FormGroup>\n              <Label for=\"player-black\">Black</Label>\n              <Input\n                id=\"player-black\"\n                type=\"select\"\n                name=\"selectedPlayerBlack\"\n                onChange={handleChange}\n                defaultValue={values.selectedPlayerBlack}\n                data-testid=\"player-black-selector\"\n              >\n                {availablePlayers.map(value => (\n                  <option key={value.name}>{value.name}</option>\n                ))}\n              </Input>\n            </FormGroup>\n            {values.selectedPlayerBlack === stockfish.name && (\n              <FormGroup>\n                <Label for=\"playerBlackAnalysisDepth\">\n                  Engine analysis depth\n                </Label>\n                <Input\n                  type=\"number\"\n                  name=\"playerBlackAnalysisDepth\"\n                  value={values.playerBlackAnalysisDepth}\n                  onChange={handleChange}\n                />\n              </FormGroup>\n            )}\n            <Button\n              type=\"submit\"\n              color=\"primary\"\n              data-testid=\"submit\"\n              onClick={handleSubmit}\n            >\n              Go\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default GameCreator;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Layout from \"./Layout\";\nimport GameCreator from \"./chess/GameCreator\";\n\nconst App: React.FC = () => {\n  return (\n    <Layout>\n      <GameCreator />\n    </Layout>\n  );\n};\n\nexport default App;\n","// This optional code is used validTo register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits validTo a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this chess and instructions on how validTo\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used validTo\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging validTo localhost, pointing developers validTo the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time validTo display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && !contentType.includes(\"javascript\"))\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./ui/App\";\nimport * as serviceWorker from \"./infrastructure/serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app validTo work offline and load faster, you can change\n// unregister() validTo register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}